{"openapi":"3.1.0","info":{"title":"mirakc Web API","description":"","contact":{"name":"Contributors of mirakc"},"license":{"name":"MIT OR Apache-2.0","identifier":"MIT OR Apache-2.0"},"version":"4.0.0-dev.0"},"servers":[{"url":"/api"}],"paths":{"/channels":{"parameters":[],"get":{"tags":["channels"],"summary":"Lists channels.","operationId":"getChannels","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MirakurunChannel"}}}}},"500":{"description":"Internal Server Error"}}}},"/channels/{type}/{channel}/services/{sid}/stream":{"parameters":[],"get":{"tags":["channels::services::stream","stream"],"summary":"Gets a media stream of a service.","operationId":"getServiceStreamByChannel","parameters":[{"name":"X-Mirakurun-Priority","in":"header","description":"Priority of the tuner user","required":false,"schema":{"type":["integer","null"],"format":"int32"}},{"name":"type","in":"path","description":"Channel type","required":true,"schema":{"$ref":"#/components/schemas/ChannelType"}},{"name":"channel","in":"path","description":"Channel number","required":true,"schema":{"type":"string"}},{"name":"sid","in":"path","description":"Service ID (not Mirakurun Service ID)","required":true,"schema":{"type":"integer","format":"int32","minimum":0}},{"name":"decode","in":"query","description":"`0` or `false` disables decoding.\n\nThe stream will be decoded by default if a decoder is specified in the\n`config.yml`.","required":false,"schema":{"type":"boolean"}},{"name":"pre-filters","in":"query","description":"A list of pre-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"A list of post-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","headers":{"X-Mirakurun-Tuner-User-ID":{"schema":{"type":"string"},"description":"Tuner user ID"}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Tuner Resource Unavailable"}}},"head":{"tags":["channels::services::stream","stream"],"operationId":"head","parameters":[{"name":"X-Mirakurun-Priority","in":"header","description":"Priority of the tuner user","required":false,"schema":{"type":["integer","null"],"format":"int32"}},{"name":"type","in":"path","description":"Channel type","required":true,"schema":{"$ref":"#/components/schemas/ChannelType"}},{"name":"channel","in":"path","description":"Channel number","required":true,"schema":{"type":"string"}},{"name":"sid","in":"path","description":"Service ID (not Mirakurun Service ID)","required":true,"schema":{"type":"integer","format":"int32","minimum":0}},{"name":"decode","in":"query","description":"`0` or `false` disables decoding.\n\nThe stream will be decoded by default if a decoder is specified in the\n`config.yml`.","required":false,"schema":{"type":"boolean"}},{"name":"pre-filters","in":"query","description":"A list of pre-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"A list of post-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","headers":{"X-Mirakurun-Tuner-User-ID":{"schema":{"type":"string"},"description":"Tuner user ID"}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Tuner Resource Unavailable"}}}},"/channels/{type}/{channel}/stream":{"parameters":[],"get":{"tags":["channels::stream","stream"],"summary":"Gets a media stream of a channel.","operationId":"getChannelStream","parameters":[{"name":"X-Mirakurun-Priority","in":"header","description":"Priority of the tuner user","required":false,"schema":{"type":["integer","null"],"format":"int32"}},{"name":"type","in":"path","description":"Channel type","required":true,"schema":{"$ref":"#/components/schemas/ChannelType"}},{"name":"channel","in":"path","description":"Channel number","required":true,"schema":{"type":"string"}},{"name":"decode","in":"query","description":"`0` or `false` disables decoding.\n\nThe stream will be decoded by default if a decoder is specified in the\n`config.yml`.","required":false,"schema":{"type":"boolean"}},{"name":"pre-filters","in":"query","description":"A list of pre-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"A list of post-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","headers":{"X-Mirakurun-Tuner-User-ID":{"schema":{"type":"string"},"description":"Tuner user ID"}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Tuner Resource Unavailable"}}},"head":{"tags":["channels::stream","stream"],"operationId":"checkChannelStream","parameters":[{"name":"X-Mirakurun-Priority","in":"header","description":"Priority of the tuner user","required":false,"schema":{"type":["integer","null"],"format":"int32"}},{"name":"type","in":"path","description":"Channel type","required":true,"schema":{"$ref":"#/components/schemas/ChannelType"}},{"name":"channel","in":"path","description":"Channel number","required":true,"schema":{"type":"string"}},{"name":"decode","in":"query","description":"`0` or `false` disables decoding.\n\nThe stream will be decoded by default if a decoder is specified in the\n`config.yml`.","required":false,"schema":{"type":"boolean"}},{"name":"pre-filters","in":"query","description":"A list of pre-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"A list of post-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","headers":{"X-Mirakurun-Tuner-User-ID":{"schema":{"type":"string"},"description":"Tuner user ID"}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Tuner Resource Unavailable"}}}},"/iptv/epg":{"parameters":[],"get":{"tags":["iptv"],"summary":"Gets an XMLTV document containing all TV program information.","operationId":"epg","responses":{"200":{"description":"OK","content":{"application/xml":{"schema":{"type":"string"}}}},"500":{"description":"Internal Server Error"}}}},"/iptv/playlist":{"parameters":[],"get":{"tags":["iptv"],"summary":"Get an M3U8 playlist containing all available services.","operationId":"playlist","responses":{"200":{"description":"OK","content":{"application/x-mpegURL":{"schema":{"type":"string"}}}},"500":{"description":"Internal Server Error"}}}},"/iptv/xmltv":{"parameters":[],"get":{"tags":["iptv"],"summary":"Gets an XMLTV document containing all TV program information.","description":"For compatibility with Mirakurun.","operationId":"xmltv","responses":{"200":{"description":"OK","content":{"application/xml":{"schema":{"type":"string"}}}},"500":{"description":"Internal Server Error"}}}},"/onair":{"parameters":[],"get":{"tags":["onair"],"summary":"List on-air programs.","operationId":"getOnairPrograms","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/WebOnairProgram"}}}}},"500":{"description":"Internal Server Error"}}}},"/onair/{service_id}":{"parameters":[],"get":{"tags":["onair"],"summary":"Gets an on-air program of a specified service.","operationId":"getOnairProgram","parameters":[{"name":"service_id","in":"path","description":"Mirakurun service ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/WebOnairProgram"}}}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/programs":{"parameters":[],"get":{"tags":["programs"],"summary":"Lists TV programs.","description":"The list contains TV programs that have ended.\n\nA newer Mirakurun returns information contained in EIT[schedule]\noverridded by EIT[p/f] from this endpoint.  This may cause","operationId":"getPrograms","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MirakurunProgram"}}}}},"500":{"description":"Internal Server Error"}}}},"/programs/{id}":{"parameters":[],"get":{"tags":["programs"],"summary":"Gets a TV program.","description":"### A special hack for EPGStation\n\nIf the User-Agent header string starts with \"EPGStation/\", this endpoint\nreturns information contained in EIT[p/f] if it exists. Otherwise,\ninformation contained in EIT[schedule] is returned.\n\nEPGStation calls this endpoint in order to update the start time and the\nduration of the TV program while recording.  The intention of this call is\nassumed that EPGStation wants to get the TV program information equivalent\nto EIT[p].  However, this endpoint should return information contained in\nEIT[schedule] basically in a web API consistency point of view.  Information\ncontained in EIT[p/f] should be returned from other endpoints.\n\nSee also [/programs/{id}/stream](#/stream/getProgramStream).","operationId":"getProgram","parameters":[{"name":"id","in":"path","description":"Mirakurun program ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MirakurunProgram"}}}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/programs/{id}/stream":{"parameters":[],"get":{"tags":["programs::stream","stream"],"summary":"Gets a media stream of a program.","description":"### A special hack for EPGStation\n\nIf the User-Agent header string starts with \"EPGStation/\", this endpoint\ncreates a temporal on-air program tracker if there is no tracker defined in\nconfig.yml, which can be reused for tracking changes of the TV program\nmetadata.\n\nThe temporal on-air program tracker will be stopped within 1 minute after\nthe streaming stopped.\n\nThe metadata will be returned from [/programs/{id}](#/programs/getProgram).","operationId":"getProgramStream","parameters":[{"name":"X-Mirakurun-Priority","in":"header","description":"Priority of the tuner user","required":false,"schema":{"type":["integer","null"],"format":"int32"}},{"name":"id","in":"path","description":"Mirakurun program ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}},{"name":"decode","in":"query","description":"`0` or `false` disables decoding.\n\nThe stream will be decoded by default if a decoder is specified in the\n`config.yml`.","required":false,"schema":{"type":"boolean"}},{"name":"pre-filters","in":"query","description":"A list of pre-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"A list of post-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","headers":{"X-Mirakurun-Tuner-User-ID":{"schema":{"type":"string"},"description":"Tuner user ID"}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Tuner Resource Unavailable"}}},"head":{"tags":["programs::stream","stream"],"operationId":"checkProgramStream","parameters":[{"name":"X-Mirakurun-Priority","in":"header","description":"Priority of the tuner user","required":false,"schema":{"type":["integer","null"],"format":"int32"}},{"name":"id","in":"path","description":"Mirakurun program ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}},{"name":"decode","in":"query","description":"`0` or `false` disables decoding.\n\nThe stream will be decoded by default if a decoder is specified in the\n`config.yml`.","required":false,"schema":{"type":"boolean"}},{"name":"pre-filters","in":"query","description":"A list of pre-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"A list of post-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","headers":{"X-Mirakurun-Tuner-User-ID":{"schema":{"type":"string"},"description":"Tuner user ID"}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Tuner Resource Unavailable"}}}},"/recording/recorders":{"parameters":[],"get":{"tags":["recording::recorders"],"summary":"Lists recorders.","operationId":"getRecorders","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/WebRecordingRecorder"}}}}},"500":{"description":"Internal Server Error"}}},"post":{"tags":["recording::recorders"],"summary":"Starts recording immediately.","description":"> [!WARNING]\n> Use `POST /api/recording/schedules` instead.\n> The recording starts even if the TV program has not started.\n> In this case, the recording will always fail.\n\n### If `config.recording.records-dir` is specified\n\nA record will be created in the specified folder and a `recording.record-saved` event will be\nsent if the record is created successfully.  Otherwise, a `recording.record-broken` event will\nbe sent instead.","operationId":"startRecording","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebRecordingScheduleInput"}}},"required":true},"responses":{"201":{"description":"Created"},"401":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/recording/recorders/{program_id}":{"parameters":[],"get":{"tags":["recording::recorders"],"summary":"Gets a recorder.","operationId":"getRecorder","parameters":[{"name":"program_id","in":"path","description":"Mirakurun program ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebRecordingRecorder"}}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}},"delete":{"tags":["recording::recorders"],"summary":"Stops recording.","description":"Unlike `DELETE /api/recording/schedules/{program_id}`, this endpoint only stops the recording\nwithout removing the corresponding recording schedule.\n\nA `recording.stopped` event will be sent and `GET /api/recording/schedules/{program_id}` will\nreturn the schedule information.\n\n### If `config.recording.records-dir` is specified\n\nA `recording.record-saved` event will be sent if the record is updated successfully.\nOtherwise, a `recording.record-broken` event will be sent instead.","operationId":"stopRecording","parameters":[{"name":"program_id","in":"path","description":"Mirakurun program ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"201":{"description":"Created"},"401":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/recording/records":{"parameters":[],"get":{"tags":["recording::records"],"summary":"Lists records.","description":"The following kind of records are also listed:\n\n* Records currently recording\n* Records failed recording but have recorded data\n* Records that have no content files (maybe, those were removed outside the system)\n\n","operationId":"getRecords","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/WebRecord"}}}}},"500":{"description":"Internal Server Error"}}}},"/recording/records/{id}":{"parameters":[],"get":{"tags":["recording::records"],"summary":"Gets metadata of a record.","operationId":"getRecord","parameters":[{"name":"id","in":"path","description":"Record ID","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebRecord"}}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}},"delete":{"tags":["recording::records"],"summary":"Removes a record.","description":"The record cannot be removed while it's recording.  Firstly stop the recording, then remove.\n\nThe record can be removed even while streaming its content.  In this case, the streaming will\nstop once the buffered data has been sent.\n\nThe content file of the record is removed together with the record if the `purge` query\nparameter is specified.  The log file is also removed if it exists.\n\nA `recording.record-removed` event will be sent if the record is removed successfully.\n\nA `recording.content-removed` event will be sent if the content file of the record is removed\nsuccessfully.","operationId":"removeRecord","parameters":[{"name":"id","in":"path","description":"Record ID","required":true,"schema":{"type":"string"}},{"name":"purge","in":"query","description":"`1` or `true` will purge the content file.\n\nThe content file won't be purged by default.","required":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"OK"},"401":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/recording/records/{id}/stream":{"parameters":[],"get":{"tags":["recording::records::stream","stream"],"summary":"Gets a media stream of the content of a record.","description":"It's possible to get a media stream of the record even while it's recording.  In this case, data\nwill be sent when data is appended to the content file event if the stream reaches EOF at that\npoint.  The streaming will stop within 2 seconds after the stream reaches the *true* EOF.\n\nA request for a record without content file always returns status code 204.\n\nA range request with filters always causes an error response with status code 400.","operationId":"getRecordStream","parameters":[{"name":"id","in":"path","description":"Record ID","required":true,"schema":{"type":"string"}},{"name":"pre-filters","in":"query","description":"pre-filters","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"post-filters","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK"},"204":{"description":"No Content"},"400":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}},"head":{"tags":["recording::records::stream","stream"],"operationId":"checkRecordStream","parameters":[{"name":"id","in":"path","description":"Record ID","required":true,"schema":{"type":"string"}},{"name":"pre-filters","in":"query","description":"pre-filters","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"post-filters","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK"},"204":{"description":"No Content"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/recording/schedules":{"parameters":[],"get":{"tags":["recording::schedules"],"summary":"Lists recording schedules.","operationId":"getRecordingSchedules","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/WebRecordingSchedule"}}}}},"500":{"description":"Internal Server Error"}}},"post":{"tags":["recording::schedules"],"summary":"Books a recording schedule.","description":"### If `config.recording.records-dir` is specified\n\nWhen the recording starts, a record will be created in the specified folder and a\n`recording.record-saved` event will be sent if the record is created successfully.  Otherwise,\na `recording.record-broken` event will be sent instead.","operationId":"createRecordingSchedule","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebRecordingScheduleInput"}}},"required":true},"responses":{"201":{"description":"Created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebRecordingSchedule"}}}},"401":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}},"delete":{"tags":["recording::schedules"],"summary":"Clears recording schedules.","description":"If a tag name is specified in the `tag` query parameter, recording schedules\ntagged with the specified name will be deleted.  Otherwise, all recording\nschedules will be deleted.\n\nWhen deleting recording schedules by a tag, recording schedules that meet\nany of the following conditions won't be deleted:\n\n  * Recording schedules without the specified tag\n  * Recording schedules in the `tracking` or `recording` state\n  * Recording schedules in the `scheduled` state and will start recording\n    soon","operationId":"deleteRecordingSchedules","parameters":[{"name":"tag","in":"query","description":"Tag name","required":false,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK"},"500":{"description":"Internal Server Error"}}}},"/recording/schedules/{program_id}":{"parameters":[],"get":{"tags":["recording::schedules"],"summary":"Gets a recording schedule.","operationId":"getRecordingSchedule","parameters":[{"name":"program_id","in":"path","description":"Mirakurun program ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebRecordingSchedule"}}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}},"delete":{"tags":["recording::schedules"],"summary":"Deletes a recording schedule.","operationId":"deleteRecordingSchedule","parameters":[{"name":"program_id","in":"path","description":"Mirakurun program ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"200":{"description":"OK"},"401":{"description":"Bad Request"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/services":{"parameters":[],"get":{"tags":["services"],"summary":"Lists services.","operationId":"getServices","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MirakurunService"}}}}},"500":{"description":"Internal Server Error"}}}},"/services/{id}":{"parameters":[],"get":{"tags":["services"],"summary":"Gets a service.","operationId":"getService","parameters":[{"name":"id","in":"path","description":"Mirakurun service ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MirakurunService"}}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/services/{id}/logo":{"parameters":[],"get":{"tags":["services"],"summary":"Gets a logo image of a service.","operationId":"getLogoImage","parameters":[{"name":"id","in":"path","description":"Mirakurun service ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"200":{"description":"OK","content":{"image/png":{}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Logo Data Unavailable"}}}},"/services/{id}/programs":{"parameters":[],"get":{"tags":["services"],"summary":"Lists TV programs of a service.","description":"The list contains TV programs that have ended.","operationId":"getProgramsOfService","parameters":[{"name":"id","in":"path","description":"Mirakurun service ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MirakurunProgram"}}}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/services/{id}/stream":{"parameters":[],"get":{"tags":["services::stream","stream"],"summary":"Gets a media stream of a service.","operationId":"getServiceStream","parameters":[{"name":"X-Mirakurun-Priority","in":"header","description":"Priority of the tuner user","required":false,"schema":{"type":["integer","null"],"format":"int32"}},{"name":"id","in":"path","description":"Mirakurun service ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}},{"name":"decode","in":"query","description":"`0` or `false` disables decoding.\n\nThe stream will be decoded by default if a decoder is specified in the\n`config.yml`.","required":false,"schema":{"type":"boolean"}},{"name":"pre-filters","in":"query","description":"A list of pre-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"A list of post-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","headers":{"X-Mirakurun-Tuner-User-ID":{"schema":{"type":"string"},"description":"Tuner user ID"}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Tuner Resource Unavailable"}}},"head":{"tags":["services::stream","stream"],"operationId":"checkServiceStream","parameters":[{"name":"X-Mirakurun-Priority","in":"header","description":"Priority of the tuner user","required":false,"schema":{"type":["integer","null"],"format":"int32"}},{"name":"id","in":"path","description":"Mirakurun service ID","required":true,"schema":{"type":"integer","format":"int64","minimum":0}},{"name":"decode","in":"query","description":"`0` or `false` disables decoding.\n\nThe stream will be decoded by default if a decoder is specified in the\n`config.yml`.","required":false,"schema":{"type":"boolean"}},{"name":"pre-filters","in":"query","description":"A list of pre-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"post-filters","in":"query","description":"A list of post-filters to use.","required":false,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK","headers":{"X-Mirakurun-Tuner-User-ID":{"schema":{"type":"string"},"description":"Tuner user ID"}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"},"503":{"description":"Tuner Resource Unavailable"}}}},"/status":{"parameters":[],"get":{"tags":["status"],"summary":"Gets current status information.","description":"mirakc doesn't implement this endpoint and always returns an empty object.","operationId":"getStatus","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Status"}}}}}}},"/tuners":{"parameters":[],"get":{"tags":["tuners"],"summary":"Lists tuners enabled in `config.yml`.","operationId":"getTuners","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MirakurunTuner"}}}}},"500":{"description":"Internal Server Error"}}}},"/tuners/{index}":{"parameters":[],"get":{"tags":["tuners"],"summary":"Gets a tuner model.","operationId":"getTuner","parameters":[{"name":"index","in":"path","description":"Tuner index","required":true,"schema":{"type":"integer","minimum":0}}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MirakurunTuner"}}}},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}}}},"/version":{"parameters":[],"get":{"tags":["version"],"summary":"Gets version information.","operationId":"checkVersion","responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Version"}}}}}}}},"components":{"schemas":{"ChannelType":{"type":"string","enum":["GR","BS","CS","SKY","BS4K"]},"MirakurunChannel":{"type":"object","title":"Channel","required":["type","channel","name","services"],"properties":{"channel":{"type":"string"},"name":{"type":"string"},"services":{"type":"array","items":{"type":"object","required":["id","serviceId","networkId","name"],"properties":{"id":{"type":"integer","format":"int64","minimum":0},"name":{"type":"string"},"networkId":{"type":"integer","format":"int32","minimum":0},"serviceId":{"type":"integer","format":"int32","minimum":0}}}},"type":{"$ref":"#/components/schemas/ChannelType"}}},"MirakurunProgram":{"type":"object","title":"Program","required":["id","eventId","serviceId","networkId","startAt","duration","isFree"],"properties":{"audio":{"oneOf":[{"type":"null"},{"type":"object","required":["componentType","isMain","samplingRate","langs"],"properties":{"componentType":{"type":"integer","format":"int32","minimum":0},"isMain":{"type":"boolean"},"langs":{"type":"array","items":{"type":"string"}},"samplingRate":{"type":"integer","format":"int32"}}}]},"audios":{"type":"array","items":{"type":"object","required":["componentType","isMain","samplingRate","langs"],"properties":{"componentType":{"type":"integer","format":"int32","minimum":0},"isMain":{"type":"boolean"},"langs":{"type":"array","items":{"type":"string"}},"samplingRate":{"type":"integer","format":"int32"}}}},"description":{"type":["string","null"]},"duration":{"type":"integer","format":"int64"},"eventId":{"type":"integer","format":"int32","minimum":0},"extended":{"type":"object"},"genres":{"type":["array","null"],"items":{"type":"object","required":["lv1","lv2","un1","un2"],"properties":{"lv1":{"type":"integer","format":"int32","minimum":0},"lv2":{"type":"integer","format":"int32","minimum":0},"un1":{"type":"integer","format":"int32","minimum":0},"un2":{"type":"integer","format":"int32","minimum":0}}}},"id":{"type":"integer","format":"int64","minimum":0},"isFree":{"type":"boolean"},"name":{"type":["string","null"]},"networkId":{"type":"integer","format":"int32","minimum":0},"relatedItems":{"type":"array","items":{"type":"object","required":["type","serviceId","eventId"],"properties":{"eventId":{"type":"integer","format":"int32","minimum":0},"networkId":{"type":["integer","null"],"format":"int32","minimum":0},"serviceId":{"type":"integer","format":"int32","minimum":0},"type":{"type":"string"}}}},"series":{"oneOf":[{"type":"null"},{"type":"object","required":["id","repeat","pattern","expireAt","episode","lastEpisode","name"],"properties":{"episode":{"type":"integer","format":"int32","minimum":0},"expireAt":{"type":"integer","format":"int64"},"id":{"type":"integer","format":"int32","minimum":0},"lastEpisode":{"type":"integer","format":"int32","minimum":0},"name":{"type":"string"},"pattern":{"type":"integer","format":"int32","minimum":0},"repeat":{"type":"integer","format":"int32","minimum":0}}}]},"serviceId":{"type":"integer","format":"int32","minimum":0},"startAt":{"type":"integer","format":"int64"},"video":{"oneOf":[{"type":"null"},{"type":"object","required":["streamContent","componentType"],"properties":{"componentType":{"type":"integer","format":"int32","minimum":0},"resolution":{"type":["string","null"]},"streamContent":{"type":"integer","format":"int32","minimum":0},"type":{"type":["string","null"]}}}]}}},"MirakurunService":{"type":"object","title":"Service","required":["id","serviceId","networkId","type","name","channel","hasLogoData"],"properties":{"channel":{"type":"object","required":["type","channel"],"properties":{"channel":{"type":"string"},"type":{"$ref":"#/components/schemas/ChannelType"}}},"hasLogoData":{"type":"boolean"},"id":{"type":"integer","format":"int64","minimum":0},"logoId":{"type":"integer","format":"int32"},"name":{"type":"string"},"networkId":{"type":"integer","format":"int32","minimum":0},"remoteControlKeyId":{"type":"integer","format":"int32","minimum":0},"serviceId":{"type":"integer","format":"int32","minimum":0},"type":{"type":"integer","format":"int32","minimum":0}}},"MirakurunTuner":{"type":"object","title":"Tuner","required":["index","name","types","users","isAvailable","isRemote","isFree","isUsing","isFault"],"properties":{"command":{"type":["string","null"],"description":"A command to use getting a media stream from the tuner."},"index":{"type":"integer","description":"The index of the tuner defined in `config.yml`.","minimum":0},"isAvailable":{"type":"boolean","description":"Always `true`."},"isFault":{"type":"boolean","description":"Always `false`."},"isFree":{"type":"boolean","description":"`true` if the tuner is free, `false` otherwise."},"isRemote":{"type":"boolean","description":"Always `false`."},"isUsing":{"type":"boolean","description":"`false` if the tuner is free, `true` otherwise."},"name":{"type":"string","description":"The name of the tuner defined in `config.yml`."},"pid":{"type":["integer","null"],"format":"int32","description":"PID of a process to run the command.","minimum":0},"types":{"type":"array","items":{"$ref":"#/components/schemas/ChannelType"},"description":"Channel types supported by the tuner."},"users":{"type":"array","items":{"type":"object","required":["id","priority"],"properties":{"agent":{"type":["string","null"],"description":"User-Agent string."},"id":{"type":"string","description":"User ID."},"priority":{"type":"integer","format":"int32","description":"Priority."}}},"description":"Users of the tuner."}}},"RecordingFailedReason":{"oneOf":[{"type":"object","required":["message","type"],"properties":{"message":{"type":"string"},"type":{"type":"string","enum":["start-recording-failed"]}}},{"type":"object","required":["message","type"],"properties":{"message":{"type":"string"},"osError":{"type":["integer","null"],"format":"int32"},"type":{"type":"string","enum":["io-error"]}}},{"type":"object","required":["exitCode","type"],"properties":{"exitCode":{"type":"integer","format":"int32"},"type":{"type":"string","enum":["pipeline-error"]}}},{"type":"object","required":["type"],"properties":{"type":{"type":"string","enum":["need-rescheduling"]}}},{"type":"object","required":["type"],"properties":{"type":{"type":"string","enum":["schedule-expired"]}}},{"type":"object","required":["type"],"properties":{"type":{"type":"string","enum":["removed-from-epg"]}}}]},"RecordingOptions":{"type":"object","title":"RecordingOptions","description":"Recording options.","properties":{"contentPath":{"type":["string","null"],"description":"The path of the content file relative to `config.recording.basedir`.\n\nThe path must be a valid Unicode string.\n\n### If `config.recording.records-dir` is NOT specified\n\nThis is a required option.  A response with the status code 401 will be replied if this\noption is not specified.\n\n### If `config.recording.records-dir` is specified\n\nAn auto-generated filename will be used for the content file if this option is not\nspecified."},"logFilter":{"type":["string","null"],"description":"Log filter of the recording schedule.\n\nIf this option is not specified, the value of `config.recording.log-filter` is used when\nthe recording starts.  The log filter will be set to the environment variable\n`MIRAKC_ARIB_LOG` passed to the recording command pipeline.\n\nIf the log filter is neither empty nor `off`, logs coming from the recording command\npipeline will be stored into a log file.  The log file will be placed in the same folder as\nthe content file and its name is \"<content-file>.log\".  The environment variable\n`MIRAKC_ARIB_LOG_NO_TIMESTAMP` will be disabled and each log will have a timestamp.\n\nIf the log filter is empty or `off`, no log will come from the recording command pipeline.\nAnd the log file won't be created.\n\nFor backward compatibility with 3.x and older versions, the logs will be output to STDOUT\nif neither this option nor `recording.log-filter` is specified."},"postFilters":{"type":"array","items":{"type":"string"},"description":"A list of post-filters to use."},"preFilters":{"type":"array","items":{"type":"string"},"description":"A list of pre-filters to use."},"priority":{"type":"integer","format":"int32","description":"A priority of tuner usage."}}},"RecordingScheduleState":{"type":"string","title":"RecordingScheduleState","enum":["scheduled","tracking","recording","rescheduling","finished","failed"]},"Status":{"type":"object","description":"State information of mirakc currently running."},"Version":{"type":"object","description":"Version information of mirakc currently running.","required":["current","latest"],"properties":{"current":{"type":"string","description":"Current version."},"latest":{"type":"string","description":"Same as `current`."}}},"WebContentInfo":{"type":"object","title":"ContentInfo","description":"A content information model.","required":["path","type"],"properties":{"length":{"type":["integer","null"],"format":"int64","description":"The size of the content.\n\n`null` if there is no content file at the location specified by `content_path` of the\nrecording schedule.\n\n`0` will be set if failed getting the size of the content file even though the file exists.","minimum":0},"path":{"type":"string","description":"The path of the content file relative to `config.recording.basedir`."},"type":{"type":"string","description":"The MIME type of the content."}}},"WebOnairProgram":{"type":"object","title":"OnairProgram","description":"Metadata of TV program that is now on-air in a service.\n\nThe metadata is collected from EIT[p/f] sections, not from EIT[schedule]\nsections.","required":["serviceId"],"properties":{"current":{"oneOf":[{"type":"null"},{"$ref":"#/components/schemas/MirakurunProgram","description":"A TV program that is now on-air.\n\n`null` when no TV program is broadcasted."}]},"next":{"oneOf":[{"type":"null"},{"$ref":"#/components/schemas/MirakurunProgram","description":"A TV program that will start next.\n\n`null` when there is no next TV program."}]},"serviceId":{"type":"integer","format":"int64","description":"Mirakurun service ID.","minimum":0}}},"WebProcessModel":{"type":"object","title":"ProcessModel","description":"A process model constituting a pipeline.","required":["command"],"properties":{"command":{"type":"string","description":"A command currently running in the pipeline."},"pid":{"type":["integer","null"],"format":"int32","description":"The process ID of a process running the command.","minimum":0}}},"WebRecord":{"type":"object","title":"Record","description":"A record model.","required":["id","program","service","tags","recording","content"],"properties":{"content":{"$ref":"#/components/schemas/WebContentInfo","description":"Information about the content."},"id":{"type":"integer","format":"int64","description":"The record ID.","minimum":0},"program":{"$ref":"#/components/schemas/MirakurunProgram","description":"Metadata of the TV program."},"recording":{"$ref":"#/components/schemas/WebRecordingInfo","description":"Information about the recording."},"service":{"$ref":"#/components/schemas/MirakurunService","description":"Metadata of the service."},"tags":{"type":"array","items":{"type":"string"},"description":"A list of tags copied from the recording schedule."}}},"WebRecordingInfo":{"type":"object","title":"RecordingInfo","description":"A recording information model.","required":["options","status","startTime"],"properties":{"duration":{"type":"integer","format":"int64","description":"The duration of the **actual** recording in milliseconds.\n\nThe value may not equal to the duration of the TV program.\n\nUndefined during recording."},"endTime":{"type":"integer","format":"int64","description":"The end time of the **actual** recording in UNIX time (milliseconds).\n\nThe value may not equal to the end time of the TV program.\n\nUndefined during recording."},"failedReason":{"oneOf":[{"type":"null"},{"$ref":"#/components/schemas/RecordingFailedReason","description":"The reason for the recording failure.\n\nThis property is available only when the `status` is `failed`."}]},"options":{"$ref":"#/components/schemas/RecordingOptions","description":"Recording options."},"startTime":{"type":"integer","format":"int64","description":"The start time of the **actual** recording in UNIX time (milliseconds).\n\nThe value may not equal to the start time of the TV program."},"status":{"$ref":"#/components/schemas/WebRecordingStatus","description":"The current status of the record."}}},"WebRecordingRecorder":{"type":"object","title":"RecordingRecorder","description":"A recorder model.","required":["programId","startedAt","pipeline"],"properties":{"pipeline":{"type":"array","items":{"$ref":"#/components/schemas/WebProcessModel"},"description":"A list of process models constituting the recording pipeline."},"programId":{"type":"integer","format":"int64","description":"A Mirakurun program ID of the TV program currently being recorded.","minimum":0},"startedAt":{"type":"integer","format":"int64","description":"A time when the recording started.\n\nIt's may not be equal to the start time of the TV program."}}},"WebRecordingSchedule":{"type":"object","title":"RecordingSchedule","description":"A recording schedule model.","required":["state","program","options","tags"],"properties":{"failedReason":{"oneOf":[{"type":"null"},{"$ref":"#/components/schemas/RecordingFailedReason","description":"Reason of the recording failure.\n\nThis property exists only when the recording failed."}]},"options":{"$ref":"#/components/schemas/RecordingOptions","description":"Recording options."},"program":{"$ref":"#/components/schemas/MirakurunProgram","description":"Metadata of the target TV program."},"state":{"$ref":"#/components/schemas/RecordingScheduleState","description":"The current state of the recording schedule."},"tags":{"type":"array","items":{"type":"string"},"description":"A list of tags."}}},"WebRecordingScheduleInput":{"type":"object","title":"RecordingScheduleInput","description":"Input data used when creating a recording schedule.","required":["programId","options"],"properties":{"options":{"$ref":"#/components/schemas/RecordingOptions","description":"Recording options."},"programId":{"type":"integer","format":"int64","description":"A Mirakurun program ID of the target TV program.","minimum":0},"tags":{"type":"array","items":{"type":"string"},"description":"A list of tags."}}},"WebRecordingStatus":{"type":"string","title":"RecordingStatus","description":"A recording status.","enum":["recording","finished","canceled","failed"]},"WebTimeshiftRecord":{"type":"object","title":"TimeshiftRecord","description":"Metadata of a timeshift record.","required":["id","program","startTime","duration","size","recording"],"properties":{"duration":{"type":"integer","format":"int64","description":"The duration of the timeshift record in milliseconds."},"id":{"type":"integer","format":"int32","description":"A timeshift record ID.","minimum":0},"program":{"$ref":"#/components/schemas/MirakurunProgram","description":"Metadata of the TV program."},"recording":{"type":"boolean","description":"`true` while recording, `false` otherwise."},"size":{"type":"integer","format":"int64","description":"The size of the timeshift record in bytes.","minimum":0},"startTime":{"type":"integer","format":"int64","description":"The start time of the timeshift record in UNIX time (milliseconds)."}}},"WebTimeshiftRecorder":{"type":"object","title":"TimeshiftRecorder","description":"A timeshift recorder model.","required":["name","service","duration","numRecords","pipeline","recording"],"properties":{"currentRecordId":{"type":["integer","null"],"format":"int32","description":"An ID of the record currently being recorded.","minimum":0},"duration":{"type":"integer","format":"int64","description":"The duration of the timeshift timeline.\n\n`0` when there is no record."},"endTime":{"type":["integer","null"],"format":"int64","description":"The end time of the timeshift timeline.\n\n`null` when there is no record."},"name":{"type":"string","description":"The timeshift recorder name defined in `config.yml`."},"numRecords":{"type":"integer","description":"The number of records available for playback.\n\nThe number will change over the recording.  For example,\n[/timeshift/{recorder}/records](#/timeshift::records/getTimeshiftRecords) may\nreturn different number of records from this value.","minimum":0},"pipeline":{"type":"array","items":{"$ref":"#/components/schemas/WebProcessModel"},"description":"A list of process models constituting the timeshift pipeline currently\nrunning."},"recording":{"type":"boolean","description":"`true` while recording, `false` otherwise.\n\nUsers can still access the records even if this property returns\n`false`."},"service":{"$ref":"#/components/schemas/MirakurunService","description":"Metadata of the service to be recorded."},"startTime":{"type":["integer","null"],"format":"int64","description":"The start time of the timeshift timeline.\n\n`null` when there is no record."}}}}}}